{"ast":null,"code":"import _classCallCheck from \"/Volumes/WorkDisk/WebTask/Completed/CityLife/citylife_front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Volumes/WorkDisk/WebTask/Completed/CityLife/citylife_front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Volumes/WorkDisk/WebTask/Completed/CityLife/citylife_front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Volumes/WorkDisk/WebTask/Completed/CityLife/citylife_front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Volumes/WorkDisk/WebTask/Completed/CityLife/citylife_front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/Volumes/WorkDisk/WebTask/Completed/CityLife/citylife_front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/Volumes/WorkDisk/WebTask/Completed/CityLife/citylife_front/src/app/router/CityLife/MainContent/CurrentCity/index.js\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { Select } from 'react-inputs-validation';\nimport { setCurrentCity, setStep } from '../../../../../actions';\nimport 'react-inputs-validation/lib/react-inputs-validation.min.css';\nexport var CurrentCity =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(CurrentCity, _React$Component);\n\n  function CurrentCity(props) {\n    var _this;\n\n    _classCallCheck(this, CurrentCity);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(CurrentCity).call(this, props));\n    _this.state = {\n      cities: null,\n      validate: false\n    };\n    _this.nextStep = _this.nextStep.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.prevStep = _this.prevStep.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n\n  _createClass(CurrentCity, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var dataSet = require('../../../../data/cost_of_living_indices.json');\n\n      this.setState({\n        cities: dataSet\n      });\n    }\n  }, {\n    key: \"prevStep\",\n    value: function prevStep() {\n      if (this.props.step === 1) {\n        return;\n      }\n\n      this.props.setStep(this.props.step - 1);\n    }\n  }, {\n    key: \"nextStep\",\n    value: function nextStep() {\n      if (!this.props.currentCity) {\n        return;\n      }\n\n      this.props.setStep(this.props.step + 1);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var generateCitiesOptions = function generateCitiesOptions() {\n        if (!_this2.state.cities) {\n          return [];\n        }\n\n        return Object.keys(_this2.state.cities).sort().map(function (key, index) {\n          return {\n            id: index,\n            name: key\n          };\n        });\n      };\n\n      var getSelectedCurrentCityNo = function getSelectedCurrentCityNo() {\n        if (!_this2.state.cities || !_this2.props.currentCity) {\n          return -1;\n        }\n\n        var no = -1;\n        Object.keys(_this2.state.cities).sort().forEach(function (key, index) {\n          if (key === _this2.props.currentCity.key) {\n            no = index;\n          }\n        });\n        return no;\n      };\n\n      return React.createElement(\"div\", {\n        className: \"row\",\n        id: \"current_city\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 74\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"col-12 text-center\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 75\n        },\n        __self: this\n      }, React.createElement(\"h1\", {\n        className: \"text-white citylife_title mt-6\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 76\n        },\n        __self: this\n      }, \"Which city do you currently live in?\")), React.createElement(\"div\", {\n        className: \"col-lg-5 col-md-6 mx-auto\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 78\n        },\n        __self: this\n      }, React.createElement(Select, {\n        tabIndex: \"1\",\n        id: \"location\",\n        name: \"location\",\n        value: getSelectedCurrentCityNo(),\n        customStyleOptionListContainer: {\n          maxHeight: '200px',\n          overflowY: 'auto'\n        },\n        validate: this.state.validate,\n        optionList: generateCitiesOptions(),\n        customStyleWrapper: {\n          backgroundColor: 'white',\n          height: '50px'\n        },\n        customStyleContainer: {\n          backgroundColor: 'white',\n          height: '50px'\n        },\n        customStyleSelect: {\n          backgroundColor: 'white',\n          height: '30px'\n        },\n        onChange: function onChange(selected_current_city, e) {\n          console.log(Object.keys(_this2.state.cities).sort()[selected_current_city]);\n\n          var newCurrentCity = _this2.state.cities[Object.keys(_this2.state.cities).sort()[selected_current_city]];\n\n          newCurrentCity.key = Object.keys(_this2.state.cities).sort()[selected_current_city];\n\n          _this2.props.setCurrentCity(newCurrentCity);\n        },\n        onBlur: function onBlur(e) {},\n        validationOption: {\n          name: 'Current City',\n          check: true,\n          required: true\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 79\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        className: \"col-lg-9 col-md-10 col-sm-12 mx-auto mt-6\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 116\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"row\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 117\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"col-6\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 118\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        className: \"col-6 text-right\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 119\n        },\n        __self: this\n      }, this.props.currentCity && React.createElement(\"button\", {\n        className: \"btn btn-md btn-rounded btn-success u-w-110\",\n        onClick: this.nextStep,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 120\n        },\n        __self: this\n      }, \"NEXT\")))));\n    }\n  }]);\n\n  return CurrentCity;\n}(React.Component);\n\nvar mapStateToProps = function mapStateToProps(_ref) {\n  var citylife = _ref.citylife;\n  var currentCity = citylife.currentCity,\n      step = citylife.step;\n  return {\n    currentCity: currentCity,\n    step: step\n  };\n};\n\nexport default connect(mapStateToProps, {\n  setCurrentCity: setCurrentCity,\n  setStep: setStep\n})(CurrentCity);","map":{"version":3,"sources":["/Volumes/WorkDisk/WebTask/Completed/CityLife/citylife_front/src/app/router/CityLife/MainContent/CurrentCity/index.js"],"names":["React","connect","Select","setCurrentCity","setStep","CurrentCity","props","state","cities","validate","nextStep","bind","prevStep","dataSet","require","setState","step","currentCity","generateCitiesOptions","Object","keys","sort","map","key","index","id","name","getSelectedCurrentCityNo","no","forEach","maxHeight","overflowY","backgroundColor","height","selected_current_city","e","console","log","newCurrentCity","check","required","Component","mapStateToProps","citylife"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { connect } from 'react-redux';\nimport { Select } from 'react-inputs-validation';\nimport { \n    setCurrentCity,\n    setStep,\n} from '../../../../../actions';\nimport 'react-inputs-validation/lib/react-inputs-validation.min.css';\n\n\nexport class CurrentCity extends React.Component {\n\n    constructor(props) {\n        super(props)\n        \n        this.state = {\n            cities: null,\n            validate: false,\n        };\n        this.nextStep = this.nextStep.bind(this);\n        this.prevStep = this.prevStep.bind(this);\n    }\n    \n    componentDidMount(){\n        const dataSet = require('../../../../data/cost_of_living_indices.json');\n        this.setState({\n            cities: dataSet,\n        })\n    }\n\n    prevStep(){\n        if (this.props.step === 1){\n            return;\n        }\n        this.props.setStep(this.props.step - 1)\n    }\n\n    nextStep(){\n        if(!this.props.currentCity){\n            return;\n        }\n        this.props.setStep(this.props.step + 1)\n    }\n\n    \n\trender () {\n\n        const generateCitiesOptions = () => {\n            if(!this.state.cities){\n                return [];\n            }\n            return Object.keys(this.state.cities).sort().map((key, index) => {\n                return {\n                    id: index,\n                    name: key,\n                }\n            })\n        }\n\n        const getSelectedCurrentCityNo = () =>{\n            if (!this.state.cities || !this.props.currentCity){\n                return -1;\n            }\n            let no = -1;\n            Object.keys(this.state.cities).sort().forEach((key, index) => {\n                if(key === this.props.currentCity.key){\n                    no = index;\n                }\n            });\n            return no;\n        }\n\n        return (\n            <div className=\"row\" id=\"current_city\">\n                <div className=\"col-12 text-center\">\n                    <h1 className=\"text-white citylife_title mt-6\">Which city do you currently live in?</h1>\n                </div>\n                <div className=\"col-lg-5 col-md-6 mx-auto\">\n                    <Select\n                        tabIndex=\"1\" \n                        id='location'\n                        name='location'\n                        value={getSelectedCurrentCityNo()}\n                        customStyleOptionListContainer = {{\n                            maxHeight: '200px',\n                            overflowY: 'auto',\n                        }}\n                        validate = {this.state.validate}\n                        optionList={generateCitiesOptions()}\n                        customStyleWrapper={{\n                            backgroundColor: 'white',\n                            height: '50px'\n                        }}\n                        customStyleContainer={{\n                            backgroundColor: 'white',\n                            height: '50px'\n                        }}\n                        customStyleSelect={{\n                            backgroundColor: 'white',\n                            height: '30px'\n                        }}\n                        onChange={(selected_current_city, e) => {\n                            console.log(Object.keys(this.state.cities).sort()[selected_current_city]);\n                            let newCurrentCity = this.state.cities[Object.keys(this.state.cities).sort()[selected_current_city]]\n                            newCurrentCity.key = Object.keys(this.state.cities).sort()[selected_current_city]\n                            this.props.setCurrentCity(newCurrentCity);\n                        }}\n                        onBlur={(e) => {}}\n                        validationOption={{\n                            name: 'Current City', \n                            check: true,\n                            required: true \n                        }}\n                    />\n                </div>\n                <div className=\"col-lg-9 col-md-10 col-sm-12 mx-auto mt-6\">\n                    <div className=\"row\">\n                        <div className=\"col-6\"></div>\n                        <div className=\"col-6 text-right\">\n                            {this.props.currentCity && <button className=\"btn btn-md btn-rounded btn-success u-w-110\" onClick={this.nextStep}>NEXT</button>}\n                        </div>\n                    </div>\n                </div>\n            </div> \n\t\t)\n\t}\n}\n\nconst mapStateToProps = ({ citylife}) => {\n    const {currentCity, step} = citylife;\n    return { currentCity, step};\n}\n\nexport default connect (mapStateToProps, {\n    setCurrentCity,\n    setStep\n}) (CurrentCity);"]},"metadata":{},"sourceType":"module"}